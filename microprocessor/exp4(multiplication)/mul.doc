%macro dispmsg 2
mov rax,1
mov rdi,1
mov rsi,%1
mov rdx,%2
syscall
%endmacro

%macro accept 2
mov rax,0
mov rdi,0
mov rsi,%1
mov rdx,%2
syscall
%endmacro

%macro exit 0
mov rax,60
mov rdi,0
syscall
%endmacro

section .data

menu db 10,13,"========Menu===========",10
     db 10,13,"========1.Multiplication using successive addition===========",10
     db 10,13,"========2.Multiplication using shift and add method===========",10
     db 10,13,"========3.EXIT===========",10
     db 10,13,"Enter your choice:"
menulen: equ $-menu
msg1:  db "Enter the number for multiplication:",10
len1:  equ $-msg1
msg2:  db "Multiplication is:",10
len2:  equ $-msg2
blank:  db "",10
blen: equ $-blank
emsg:  db "Invalid Choice",10
elen:  equ $-emsg

section .bss

numascii resb 03
multi1 resb 01
multi2 resb 01
resl resb 01
resh resb 01
dispbuff resb 04
buf resb 2

section .text
global _start:
_start:

dispmsg menu,menulen
accept buf,2
mov al,[buf]

c1: cmp al,'1'
    jne c2
    call succ_add
    jmp _start

c2: cmp al,'2'
    jne c3
    call shift_add
    jmp _start

c3: cmp al,'3'
    jne err
    exit

err: dispmsg emsg,elen
     jmp _start



succ_add:
	dispmsg msg1,len1
	accept numascii,3

	call packnum
	mov [multi1],bl

	dispmsg msg1,len1
	accept numascii,3
	call packnum
	mov rcx,00h
	mov rax,[multi1] ; get multiplier in EAX

	addup:

	add rcx,rax
	dec bl
	jnz addup

	mov [resl],rcx
	dispmsg msg2,len2
	mov rbx,[resl]

	call disp16_proc

	dispmsg blank,blen
	ret

shift_add:
	dispmsg msg1,len1
	accept numascii,3

	call packnum
	mov [multi1],bl

	dispmsg msg1,len1
	accept numascii,3

	call packnum
	mov [multi2],bl

	mov al,[multi1]
	xor rdx,rdx

	xor rcx,rcx
	mov dl,08

	p: shr bx,01
	   jnc d1
	   add cx,ax
	d1: shl ax,01
	    dec dl
	    jnz p
	    mov [resl],rcx
	    
	dispmsg msg2,len2
	mov bx,[resl]

	call disp16_proc

	dispmsg blank,blen
	ret

	packnum:  ;e.g. 12  unpack 31 32= 12pack
	mov bl,0
	mov rcx,02
	mov rsi,numascii
	up1:
	rol bl,04
	mov al,[rsi]
	cmp al,39h
	jbe sub30
	sub al,07h
	sub30: sub al,30h
	add bl,al
	inc rsi
	loop up1
	ret

disp16_proc:
	mov rcx,4
	mov rdi,resl
	dup1:
	rol bx,4
	mov al,bl
	and al,0fh
	cmp al,09
	jbe dskip
	add al,07h
	dskip: add al,30h
	mov [rdi],al
	inc rdi
	loop dup1

dispmsg resl,4
ret

;OUTPUT
;========Menu===========

;========1.Multiplication using successive addition===========

;========2.Multiplication using shift and add method===========

;========3.EXIT===========

;Enter your choice:1
;Enter the number for multiplication:
;11 
;Enter the number for multiplication:
;12
;Multiplication is:
;0132

;========Menu===========

;========1.Multiplication using successive addition===========

;========2.Multiplication using shift and add method===========

;========3.EXIT===========

;Enter your choice:2
;Enter the number for multiplication:
;12
;Enter the number for multiplication:
;11
;Multiplication is:
;0132

;========Menu===========

;========1.Multiplication using successive addition===========

;========2.Multiplication using shift and add method===========

;========3.EXIT===========

;Enter your choice:3




