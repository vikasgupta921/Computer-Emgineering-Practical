

section .data 
	menumsg db 10,'##### Menu for overlapped Block Transfer #####',10 
		db 10,'1.Block Transfer without using string instructions' 
		db 10,'2.Block Transfer with using string instructions' 
		db 10,'3.Exit',10,10 
	menumsg_len equ $-menumsg 
	 

	blk_bfrmsg db 10,10,'Block contents before transfer' 
	blk_bfrmsg_len equ $-blk_bfrmsg 

	blk_afrmsg db 10,'Block contents after transfer',10 
	blk_afrmsg_len equ $-blk_afrmsg 

	srcmsg db 10,'Source block contents::' 
	srcmsg_len equ $-srcmsg 

	position db 10,10,10,'Enter position to overlap::' 
	pos_len equ $-position 
	 
	spacechar db 20h 
	spchlength equ $-spacechar 

	srcblk db 01h,02h,03h,04h,05h,00h,00h,00h,00h,00h 

;.............................................................. 
section .bss 
	optionbuff resb 02 
	dispbuff resb 02 
	numascii resb 02 
	pos resb 00 

%macro display 2 
	mov rax,01 
	mov rdi,01 
	mov rsi,%1 
	mov rdx,%2 
	syscall 
%endmacro 

%macro accept 2 
	mov rax,00 
	mov rdi,00 
	mov rsi,%1 
	mov rdx,%2 
	syscall 
%endmacro 

;.............................................................. 
section .text 
	global _start 
_start: 
	 
	display blk_bfrmsg,blk_bfrmsg_len 
	 
	call disp_blk_proc 


menu:	display position,pos_len 
	 
	accept numascii,02 

	call packnum_proc 

	display menumsg,menumsg_len 
	 
	accept optionbuff,02 

	 
	cmp byte [optionbuff],'1' 
        jne case2 
	call wos 

	display blk_afrmsg,blk_afrmsg_len 
	call disp_blk_proc 
	 
	 
case2:	cmp byte [optionbuff],'2'			 

	jne exit 
	call ws 

	display blk_afrmsg,blk_afrmsg_len 
	call disp_blk_proc 
	 
exit:	 
	mov rax,60		;Exit 
	mov rbx,00 
	syscall 
	 
;**********Display Block Procedure********************** 

disp_blk_proc: 
		display srcmsg,srcmsg_len 
		mov rsi,srcblk 
		mov rcx,05h 
		add rcx,[pos] 
		 
	up1:	push rcx 
		mov bl,[rsi] 
		push rsi 
		 
		call disp8_proc 

		display spacechar,spchlength 
		pop rsi 
		inc rsi 
		pop rcx 
		loop up1 
		ret 

;************Without String Procedure******************* 
wos: 
	mov esi,srcblk+4 
	mov edi,esi 
	add edi,[pos] 

	mov ecx,05 
blkup1: 
	mov al,[esi] 
	mov [edi],al 
	dec esi 
	dec edi 
	loop blkup1 

	ret 
	 
;************Using String Procedure**************** 
ws:	 
	mov esi,srcblk+4 
	mov edi,esi 
	add edi,[pos] 

	mov ecx,05 

	std 
	rep movsb 

	ret 

;************Display Procedure******************** 
disp8_proc: 
	mov ecx,2 
	mov edi,dispbuff 
dup1: 
	rol bl,4 
	mov al,bl 
	and al,0fh 
	cmp al,09 
	jbe dskip 
	add al,07h 
dskip:	add al,30h 
	mov [edi],al 
	inc edi 
	loop dup1 

	display dispbuff,2 
	ret 
;************Packnum Procedure******************** 
packnum_proc: 

	mov esi,numascii 
	mov bl,[esi] 

	cmp bl,39h 
	jbe skip1 
	sub bl,07h 

skip1:	sub bl,30h 
	mov [pos],bl 
	ret	 
;***********************************************

;dell@dell-Inspiron-5547:~$ nasm -felf64 o.asm
;dell@dell-Inspiron-5547:~$ ld o.o
;dell@dell-Inspiron-5547:~$ ./a.out


;Block contents before transfer
;Source block contents::01 02 03 04 05 


;Enter position to overlap::3

;##### Menu for overlapped Block Transfer #####

;1.Block Transfer without using string instructions
;2.Block Transfer with using string instructions
;3.Exit

;1

;Block contents after transfer

;Source block contents::01 02 03 01 02 03 04 05 dell@dell-Inspiron-5547:~$ ./a.out


;Block contents before transfer
;Source block contents::01 02 03 04 05 


;Enter position to overlap::2

;##### Menu for overlapped Block Transfer #####

;1.Block Transfer without using string instructions
;2.Block Transfer with using string instructions
;3.Exit

;2

;Block contents after transfer

;Source block contents::01 02 01 02 03 04 05 dell@dell-Inspiron-5547:~$ 







